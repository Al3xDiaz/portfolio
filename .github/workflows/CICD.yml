name: CI portafolio

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - '**'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  WEBHOOK_ID: "${{ secrets.WEBHOOK_ID }}"
  WEBHOOK_TOKEN: "${{ secrets.WEBHOOK_TOKEN }}"
  GIT_STRATEGY: fetch
  GIT_DEPTH: 0
  IGNORE_NORMALISATION_GIT_HEAD_MOVE: 1

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout Code
        id: gitversion
        uses: docker://gittools/gitversion:5.12.0-alpine.3.14-6.0
        with:
          entrypoint: /bin/sh
          args: -c "echo \"{MajorMinorPatch}={$(/tools/dotnet-gitversion /nocache /nofetch /showvariable MajorMinorPatch)}\" >> $GITHUB_OUTPUT && echo \"{FullSemVer}={$(/tools/dotnet-gitversion /nocache /nofetch /showvariable FullSemVer)}\" >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT"
        # run: |
        #   /tools/dotnet-gitversion /nocache /nofetch /showvariable MajorMinorPatch
        #   /tools/dotnet-gitversion /nocache /nofetch /showvariable FullSemVer

        #   echo "::set-output name=MajorMinorPatch::$(cat MajorMinorPatch.txt)"
        #   echo "::set-output name=FullSemVer::$(cat FullSemVer.txt)"

  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [calculate-version]

    steps:
      - uses: actions/checkout@v2

      - name: Build portafolio
        run: |
          echo "build image"
          docker build portafolio --file portafolio/Dockerfile.prod --tag ${REGISTRY,,}/portafolio:latest
      - name: Build strapi
        run: |
          echo "build image"
          docker build strapi --file strapi/Dockerfile.prod --tag ${REGISTRY,,}/strapi:latest

      - name: tag docker images
        run: |
          TAG=${{ needs.calculate-version.outputs.MajorMinorPatch }}
          TAG_LONG=${{ needs.calculate-version.outputs.FullSemVer }}
          docker tag ${REGISTRY,,}/portafolio:latest ${REGISTRY,,}/portafolio:$TAG
          docker tag ${REGISTRY,,}/strapi:latest ${REGISTRY,,}/strapi:$TAG
          docker tag ${REGISTRY,,}/portafolio:latest ${REGISTRY,,}/portafolio:$TAG_LONG
          docker tag ${REGISTRY,,}/strapi:latest ${REGISTRY,,}/strapi:$TAG_LONG

      - name: Log in to registry # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.CICD_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      - name: Push tag image to registry
        if: github.ref_type == 'tag'
        run: |
          docker push $IMAGE_ID:${{ needs.calculate-version.outputs.MajorMinorPatch }}
          docker push $IMAGE_ID:${{ needs.calculate-version.outputs.FullSemVer }}
          # if branch is master, push image with `latest` tag
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker push $IMAGE_ID:latest
          fi
      - name: get gitlab artifact and create ssh key
        run: |
          curl -L --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "https://gitlab.com/api/v4/projects/42073065/jobs/artifacts/main/download?job=config_infrastructure" --output config.zip
          unzip config.zip -d ansible/inventory
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ansible
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/ansible.pub
          chmod -R 600 ~/.ssh/
      - name: deploy app with ansible
        uses: docker://registry.gitlab.com/chaoticteams/ansible:latest
        env:
          ANSIBLE_INVENTORY: ansible/inventory
        with:
          entrypoint: /bin/sh
          args: -c "ansible-playbook ansible/deploy.yml"

      - name: success
        if: ${{ success() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'
      - name: fail
        if: ${{ failure() }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} pipeline failure.'