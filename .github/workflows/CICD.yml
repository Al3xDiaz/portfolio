name: CI portafolio

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - 'main'

env:
  REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  WEBHOOK_ID: "${{ secrets.WEBHOOK_ID }}"
  WEBHOOK_TOKEN: "${{ secrets.WEBHOOK_TOKEN }}"
  GIT_STRATEGY: fetch
  GIT_DEPTH: 0
  IGNORE_NORMALISATION_GIT_HEAD_MOVE: 1
  API_URL: https://api.chaoticteam.com
  ARTIFACT_URL: "https://gitlab.com/api/v4/projects/42073065/jobs/artifacts/main/download?job=config_infrastructure"

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
      - name: Set Outputs major version
        id: set-outputs-major
        run: echo "MajorMinorPatch=${{ steps.gitversion.outputs.majorMinorPatch }}" >> $GITHUB_OUTPUT
      - name: Set Outputs full version
        id: set-outputs-full
        run: echo "FullSemVer=${{ steps.gitversion.outputs.fullSemVer }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [calculate-version]

    steps:
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/build/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('./yarn.lock') }}-${{ hashFiles('**/**/*.ts', '**/**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('./yarn.lock') }}-
      - name: Build portafolio
        run: |
          echo "build image"
          yarn version --no-git-tag-version --new-version  "${{ needs.calculate-version.outputs.MajorMinorPatch }}"
          yarn
          yarn build
          docker build --file dockerfile.static --tag ${REGISTRY,,}/portafolio:latest .

      - name: tag docker images
        run: |
          TAG=${{ needs.calculate-version.outputs.MajorMinorPatch }}
          TAG_LONG=${{ needs.calculate-version.outputs.FullSemVer }}
          docker tag ${REGISTRY,,}/portafolio:latest ${REGISTRY,,}/portafolio:$TAG
          docker tag ${REGISTRY,,}/portafolio:latest ${REGISTRY,,}/portafolio:$TAG_LONG

      - name: Log in to registry # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.CICD_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
      - name: Push tag image to registry
        run: |
          IMAGE_ID=${REGISTRY,,}/portafolio
          docker push $IMAGE_ID:${{ needs.calculate-version.outputs.MajorMinorPatch }}
          docker push $IMAGE_ID:${{ needs.calculate-version.outputs.FullSemVer }}
          # if branch is master, push image with `latest` tag
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker push $IMAGE_ID:latest
          fi
  deploy:
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.com/chaoticteams/ansible:latest
    needs:
      - calculate-version
      - build
    steps:
      - uses: actions/checkout@v3
      - name: get gitlab artifact and create ssh key
        run: |
          apk add --update --no-cache curl
          curl -L --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" "$ARTIFACT_URL" --output config.zip
          unzip -o config.zip -d .
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ansible
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/ansible.pub
          chmod 600 ~/.ssh/ansible || sudo chmod 600 ~/.ssh/ansible || echo "chmod 600 ~/.ssh/ansible failed"
      - name: deploy app with ansible
        env:
          ANSIBLE_INVENTORY: ansible/inventory
        run: |
          ansible-playbook ansible/main.yml -e "version=${{ needs.calculate-version.outputs.MajorMinorPatch }}"
...
